#!/bin/bash
#
# This script runs at first boot to perform desired configuration
#
# Processed at first boot: wifi-country, enable/disable service, custom scripts, and automatic reboot
#                          sdm --burn may write locale, keymap, and/or timezone into 1piboot.conf (NYI)
#                            if they are specified on the burn command line, so they will be processed as well
#                          ...plus a bunch of other infrequently used device settings
#
function waitusb() {
    #
    # Waits forever until a USB device found
    # Returns the name of the USB device (/dev/sdX)
    #
    # Flashes the LED with UUU if we have to wait
    #
    local flashled=$1
    secs=0
    while [ 0 ]
    do
	for d in sda sdb sdc sdd
	do
	    sdx="/dev/$d"
	    if [ -b $sdx ]
	    then
		if [ "$(lsblk $sdx 2>/dev/null)" != "" ]
		then
		    if ! grep $sdx /proc/mounts > /dev/null 2>&1
		    then
			echo $sdx
			return
		    fi
		fi
	    fi
	done
	#
	# Wait for the USB device to be inserted but nudge every 10 iterations
	#
	if [ $((secs%10)) -eq 0 ]
	then
	    echo -e "\n$(thisdate) FirstBoot: Waiting for USB Device with Local Settings File '$wifile'" > /dev/console
	    echo -e "USB Device must have the file '$wifile' in the root directory of the first partition" > /dev/console
	    echo -e "with at least 3 lines of text:" > /dev/console
	    echo -e "country=<2-Letter WiFi Country Abbreviation>" > /dev/console
	    echo -e "ssid=<your WiFi SSID>" > /dev/console
	    echo -e "password=<your WiFi Password>" > /dev/console
	    echo -e "\n...And optionally..." > /dev/console
	    echo -e "keymap=<Keymap name>" > /dev/console
	    echo -e "locale=<Locale name>" > /dev/console
	    echo -e "timezone=<Timezone>" > /dev/console
	    echo -e "NOTE: Do NOT include the angle brackets" > /dev/console
	fi
	[ $flashled -eq 1 ] && morseled "..- ..- ..-" #UUU
	secs=$((secs+1))
	sleep 1
    done
}
function updreinsmsg() {
    echo "** Update the USB drive as needed and reinsert" > /dev/console
    echo "** Waiting..." > /dev/console
}

function readusbcreds() {
    #
    # Find the credentials
    # NOTE: Doesn't handle # character in password. What about others?
    #
    tmpf=$(mktemp -q /tmp/getcred.XXXX)
    if [ ! -f /mnt/$wifile ]
    then
	logger "? FirstBoot: Local Settings File '$wifile' Not Found on USB $sdx"
	echo -e "\n$(thisdate) FirstBoot: Local Settings File '$wifile' Not Found on USB device $sdx" > /dev/console
	updreinsmsg
	echo "0"
	return
    fi
    uwificountry="" ; ussid="" ; upassword="" ; ukeymap="" ; ulocale="" ; utimezone="" ; udhcpwait=""
    tr -d '\r' < /mnt/$wifile > $tmpf # Eliminate Windows line endings if present
    IFS=":="
    while read key value
    do
	if [[ ! $key =~ ^\ *# && -n $key ]] # skip comment and malformed lines
	then
            value="${value%%\#*}"    # Del EOL comments
            value="${value%"${value##*[^[:blank:]]}"}"  # Del trailing spaces/tabs
            value="${value%\"}"     # Del opening double-quotes 
            value="${value#\"}"     # Del closing double-quotes 
            value="${value%\'}"     # Del opening single-quotes 
            value="${value#\'}"     # Del closing single-quotes 
	    case "${key,,}" in
		country)  uwificountry="${value^^}" ;;
		ssid)     ussid="$value"            ;;
		password) upassword="$value"        ;;
		keymap)   ukeymap="$value"          ;;
		timezone) utimezone="$value"        ;;
		locale)   ulocale="$value"          ;;
		dhcpwait) udhcpwait="$value"        ;;
	    esac
	fi
    done < $tmpf
    rm -f $tmpf
    rs=1          # Assume success
    echo -e "\n$(thisdate) FirstBoot: Local Settings Read from USB ${sdx}:" > /dev/console
    echo "country=$uwificountry" > /dev/console
    echo "ssid=$ussid" > /dev/console
    echo "psk=$upassword" > /dev/console
    bootlog "Found WiFi Country setting '$uwificountry' from USB Drive"
    bootlog "Found WiFi SSID setting '$ussid' from USB Drive"
    bootlog "Found WiFi Password setting '$upassword' from USB Drive"
    [ "$ukeymap" != "" ] && echo "keymap=$ukeymap" > /dev/console && bootlog "Found Keymap '$ukeymap' from USB Drive"
    [ "$ulocale" != "" ] && echo "locale=$ulocale" > /dev/console && bootlog "Found Locale '$ulocale' from USB Drive"
    [ "$utimezone" != "" ] && echo "timezone=$utimezone" > /dev/console && bootlog "Found Timezone '$utimezone' from USB Drive"
    [ "$udhcpwait" != "" ] && echo "dhcpwait=$udhcpwait" > /dev/console && bootlog "Found DHCPwait '$udhcpwait' from USB Drive"
    [ "$ussid" == "" -o "$upassword" == "" ] && echo -e "\n ? Incomplete WiFi configuration settings: WiFi SSID or Password" > /dev/console && rs=0
    ! (ckwificountry $uwificountry)  && echo -e "\n? Unrecognized WiFi Country '$uwificountry'" > /dev/console && bootlog "? Unrecognized WiFi Country '$uwificountry'" && rs=0
    ! ckkeymap $ukeymap && echo -e "\n? Unrecognized keymap '$ukeymap'" > /dev/console && bootlog "? Unrecognized Keymap '$ukeymap'" && rs=0
    ! cklocale $ulocale && echo -e "\n? Unrecognized locale '$ulocale'" > /dev/console && bootlog "? Unrecognized Locale '$ulocale'" && rs=0
    ! cktimezone $utimezone && echo -e "\n? Unrecognized Timezone '$utimezone'" > /dev/console && bootlog "? Unrecognized Timezone '$utimezone'" && rs=0
    if [ $rs -eq 1 ]
    then
	[ "$ukeymap" != "" ]   && echo "keymap=$ukeymap" >> /etc/sdm/local-1piboot.conf
	[ "$ulocale" != "" ]   && echo "locale=$ulocale" >> /etc/sdm/local-1piboot.conf
	[ "$utimezone" != "" ] && echo "timezone=$utimezone" >> /etc/sdm/local-1piboot.conf
    else
	updreinsmsg
    fi
    echo "$rs:$uwificountry:$ussid:$upassword:$udhcpwait"
    return
}

function loadusbcreds() {

    local flashled=$1 ckinternet=$2
    wifile="local-settings.txt"
    while [ 0 ]
    do
	while [ 0 ]
	do
	    sdx=$(waitusb $flashled)
	    mount ${sdx}1 /mnt
	    IFS=":" read cresult uwificountry ussid upassword udhcpwait <<< $(readusbcreds)
	    umount /mnt
	    [ "$cresult" == "1" ] && break
	    [ $flashled -eq 1 ] && morseled "... --- ..." #SOS
	    sleep 10
	done
	[ "$udhcpwait" != "" ] && dhcpwait=$udhcpwait || dhcpwait=15
	[ $dhcpwait -eq 0 ] && dhcpwait=15            #Make sure that it's not 0!
	bootlog "Set WiFi Country to '$uwificountry'"
	SUDO_USER=${myuser:-pi} raspi-config do_wifi_country "$uwificountry" nonint
	wpa="/etc/wpa_supplicant/wpa_supplicant.conf"
#	systemctl stop wpa_supplicant > /dev/null 2>&1 # This isn't even used with dhcpcd and is disabled in sdm-phase1
	systemctl stop dhcpcd > /dev/null 2>&1
	sleep 5         # Don't want wpa to stomp on my nice new config file
	bootlog "Set WiFi Credentials in $wpa"
	[ -f $wpa ] && mv $wpa ${wpa}.original
	cat > $wpa <<EOF
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
country=$uwificountry

network={
        ssid="$ussid"
        psk="$upassword"
        key_mgmt=WPA-PSK
}
EOF
	echo -e "\n$(thisdate) FirstBoot: WiFi Credentials Set in $wpa" > /dev/console
	systemctl start dhcpcd > /dev/null 2>&1
	bootlog "Wait up to $dhcpwait seconds for dhcpcd to get an IP Address"
	echo -e "\n$(thisdate) FirstBoot: Wait up to $dhcpwait seconds for dhcpcd to get an IP Address" > /dev/console
	for (( secs=0 ; secs < $dhcpwait ; secs++ ))
	do
	    myipaddr=$(awk '{print $4}' <<< $(ip -o -f inet addr show | grep wlan0) | (IFS='/'; read a b; echo $a))
	    [[ ! "$myipaddr" =~ "169.254." ]] && [ "$myipaddr" != "" ] && break
	    [ $flashled -eq 1 ] && morseled "..-. ..-. ..-." #Waiting on IP Address
	    sleep 1
	done
	myipaddr=$(awk '{print $4}' <<< $(ip -o -f inet addr show | grep wlan0) | (IFS='/'; read a b; echo $a))
	if [[ "$myipaddr" =~ "169.254." ]] || [ "$myipaddr" == "" ]
	then
	    bootlog "WiFi did not connect"
	    echo -e "\n$(thisdate) FirstBoot: WiFi did not connect; Check WiFi settings and try again" > /dev/console
	    [ $flashled -eq 1 ] && morseled "-- -- -- --" #MMM
	    sleep 5
	else
	    bootlog "WiFi connected; IP Address $myipaddr" 
	    echo -e "\n$(thisdate) FirstBoot: WiFi connected; IP Address $myipaddr" > /dev/console
	    [ $flashled -eq 1 ] && morseled "..... ..... ....." #Success for an internal address!
	    if [ $ckinternet -eq 1 ]
	    then
		if iponline 1.1.1.1
		then
		    bootlog "Internet IS accessible"
		    echo -e "\n$(thisdate) FirstBoot: Internet IS accessible" > /dev/console
		    [ $flashled -eq 1 ] && morseled ".-.-.- .-.-.- .-.-.- .-.-.-"
		    break 2
		else
		    bootlog "Internet is NOT accessible"
		    echo -e "\n$(thisdate) FirstBoot: Internet is NOT accessible" > /dev/console
		    updreinsmsg
		    [ $flashled -eq 1 ] && morseled "-.-.-. -.-.-. -.-.-. -.-.-."
		fi
	    else
		break 2
	    fi
	fi
    done
return
}
# Flash LEDS on:
# UUU No USB device UUU
# SOS Error in local-settings.txt
# -- -- -- WiFi did not get an address
# ..... ..... .....  WiFi got IP address
# .-.-.- .-.-.-  Internet is accessible
# -.-.-. -.-.-.  No Internet connectivity
# ..-. ..-. ..-. Waiting on DHCP address

function set_wifi_country () {
    #	SUDO_USER=${myuser:-pi} raspi-config do_wifi_country "$1" nonint
    # This seems to be all that's necessary from do_wifi_country
    rfkill unblock wifi
    for fn in /var/lib/systemd/rfkill/*:wlan
    do
        echo "0" > "$fn"
    done
}

function doscripts() {
    #
    # $1: wildcard file spec
    # $2: Scripts name
    #
    local fns="$1" sname="$2"
    for f in $fns
    do
	[ ! -e "$f" ] && continue        #Skip if file doesn't exist; probably no files in dir so get $fns back
	if [ -x $f ]
	then
	    bootlog "Run $sname Script '$f'"
	    bash $f
	else
	    bootlog "$sname Script '$f' does not have execute permission"
	fi
    done
}    
function doconfig() {
    cfgfile="$1"
    [ ! -f $cfgfile ] && bootlog "? Config file $cfgfile not found...skipping" && exit
    bootlog "Start Configuration with configuration file '$cfgfile'"
    IFS=":="
    while read rpifun value
    do
	if [[ ! $rpifun =~ ^\ *# && -n $rpifun ]] # skip comment and malformed lines
	then
	    value="${value%%\#*}"    # Del EOL comments
	    value="${value%"${value##*[^[:blank:]]}"}"  # Del trailing spaces/tabs
	    value="${value%\"}"     # Del opening double-quotes 
	    value="${value#\"}"     # Del closing double-quotes 
	    value="${value%\'}"     # Del opening single-quotes 
	    value="${value#\'}"     # Del closing single-quotes 
	    case "$rpifun" in
		# * do_resolution still needs to be sorted out
		serial)
		    bootlog "Set Serial Port to '$value'"
		    SUDO_USER=${myuser:-pi} raspi-config do_serial $value nonint
		    ;;
		service-enable)
		    bootlog "Enable Service '$value'"
		    systemctl enable $value
		    ;;
		service-disable)
		    bootlog "Disable Service '$value'"
		    systemctl disable $value
		    ;;
		boot_behavior|boot_behaviour)  # Allow US spelling as well ;)
		    bootlog "set boot_behaviour to '$value'"
		    SUDO_USER=${myuser:-pi} raspi-config do_boot_behaviour $value nonint
		    ;;
		audio|pi4video|boot_splash|boot_order|\
		    spi|i2c|boot_wait|net_names|overscan|blanking|\
		    pixdub|overclock|rgpio|camera|onewire)
		    # These are simple on/off and less commonly used so no elaborate logging for them
		    bootlog "Set $rpifun to '$value'"
		    SUDO_USER=${myuser:-pi} raspi-config do_$rpifun $value nonint
		    ;;
		#
		# dhcpcd, fstab, keymap, locale, and timezone may be set via sdm --burn command
		#
		dhcpcd)
		    bootlog "Append dhcpcd.conf extension '$value' to /etc/dhcpcd.conf"
		    cat /etc/sdm/assets/$value >> /etc/dhcpcd.conf
		    ;;
		fstab)
		    bootlog "Append fstab extension '$value' to /etc/fstab"
		    cat /etc/sdm/assets/$value >> /etc/fstab
		    ;;
		keymap)
		    bootlog "Set Keymap to '$value' (!Ignore invoke-rc.d messages)"
		    SUDO_USER=${myuser:-pi} raspi-config do_configure_keyboard "$value" nonint
		    ;;
		locale)
		    bootlog "Set Locale to '$value'"
		    SUDO_USER=${myuser:-pi} raspi-config do_change_locale "$value" nonint
		    declare -x LANG="$value"
		    ;;
		timezone)
		    bootlog "Set Timezone to '$value'"
		    SUDO_USER=${myuser:-pi} raspi-config do_change_timezone "$value" nonint
		    ;;
		*)
		    bootlog "% Unrecognized option '$rpifun' in '$cfgfile'"
		    ;;
	    esac
	fi
    done < $cfgfile
    bootlog "Configuration with configuration file '$cfgfile' Completed"
}
#
# Mainline
#
if [ "$1" == "" ]
then
    /usr/local/sdm/sdm-firstboot "fork" &  # Fork and restart myself so forking service is started
    exit
fi
#
# Now running in the fork
#
source /usr/local/sdm/sdm-cparse ; readparams ""
[ -f /etc/sdm/auto-1piboot.conf ] && doconfig /etc/sdm/auto-1piboot.conf
#
# Set WiFi Country or load WiFi credentials
#
[[ "$loadlocal" =~ "|flashled|" ]] && flashled=1 || flashled=0
if [[ "$loadlocal" =~ "|usb|" ]]
then
    bootlog "Loading Local Settings and WiFi Credentials from a USB drive"
    [[ "$loadlocal" =~ "|internet|" ]] && ckinternet=1 || ckinternet=0
    loadusbcreds $flashled $ckinternet
else
    if [ "$wificountry" != "" ]
    then
	bootlog "Set WiFi Country to '$wificountry'"
	set_wifi_country "$wificountry"
    fi
    if [[ "$loadlocal" =~ "|wifi|" ]]
    then
	[ "$wificountry" == "" ] && set_wifi_country US 
	bootlog "Start Captive Portal to obtain WiFi SSID and Password"
	/usr/local/sdm/sdm-cportal --apip $apip --apssid $apssid --logging /usr/local/sdm/sdm-logmsg
	bootlog "Re-enable dhcpcd Service"
	systemctl daemon-reload > /dev/null 2>&1
	systemctl enable dhcpcd > /dev/null 2>&1
    fi
fi
[ -f /etc/sdm/local-1piboot.conf ] && bootlog "Run Local Settings from --loadlocal in /etc/sdm/local-1piboot.conf" && doconfig /etc/sdm/local-1piboot.conf
#
# Only look at 1piboot.conf if there's anything to process
#
[ -f /etc/sdm/1piboot.conf ] && [ "$(grep -v -e '#' /etc/sdm/1piboot.conf | grep -v -e '^$' | wc -l)" != "0" ] && doconfig /etc/sdm/1piboot.conf
#
# Always run scripts internally generated by sdm (none yet) or Custom Phase Scripts
#
doscripts "/etc/sdm/0piboot/0*-*.sh" "Generated FirstBoot"
#
# Final FirstBoot time processing: custom scripts and reboot
#
[ "$bootscripts" == "1" ] && doscripts "/usr/local/sdm/1piboot/0*-*.sh" "Custom FirstBoot" || bootlog "Skip Custom FirstBoot Scripts"

if [ $reboot -eq 1 ]
then
    logit "" "> FirstBoot Disable sdm-firstboot service"
    systemctl disable sdm-firstboot > /dev/null 2>&1
    # Can't use this test VV because boot_behaviour might change it, so need to check both graphical.target and multi-user.target
    # while [ "$(systemctl show -p ActiveState $(systemctl get-default) --value)" != "active" ]
    lc=0
    while [ "$(systemctl show -p ActiveState graphical.target --value)" != "active" -a "$(systemctl show -p ActiveState multi-user.target --value)" != "active" ]
    do
	[ $lc -eq 0 ] && bootlog "System will restart automatically after system startup has completed"
	[ $lc -eq 0 ] && echo -e "\n$(thisdate) FirstBoot: System will restart automatically after system startup completes" > /dev/console && lc=1
	[ $flashled -eq 0 ] && morseled "-..- -..-"
	sleep 1
    done
    echo -e "\n$(thisdate) FirstBoot: Restarting the system in $rebootwait seconds\n" > /dev/console
    bootlog "Restarting the system in $rebootwait seconds"
    sleep $rebootwait
    systemctl daemon-reload
    echo -e "\n$(thisdate) FirstBoot: Restarting the system now\n" > /dev/console
    bootlog "Restarting the system now"
    systemctl reboot
fi

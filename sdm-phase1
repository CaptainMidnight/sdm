#!/bin/bash
# This script runs in the nspawn image
#

function doinstalls() {
    #
    # $1 - app list
    # $2 - subject string (e.g., "XWindows Installs" or "Application Installs")
    #
    if [ "$1" != "" ]
    then
	logtoboth "" "* Start $2"
	logtoboth "" "> ${2}: $1"
	[ $aptconfirm -eq 1 ] && yes="" || yes="-y"
	doapt "install --no-install-recommends $yes $1" $showapt
	logtoboth "" "* $2 Completed"
    else
	logtoboth "" "> Skip $2 per empty package list"
    fi
}

#
# Read configuration information from sdm
#
source /usr/local/sdm/sdm-cparse ; readparams ""
#
# If --apt just do those and exit
#
cmd="$1"
cmdoptions="$2"
if [ "$cmd" == "apt" ]
then
    logtoboth "" "* Starting apt maintenance"
    [[ "$cmdoptions" =~ "|update|" ]] &&  doapt "--yes update"  0
    [[ "$cmdoptions" =~ "|upgrade|" ]] && doapt "--yes upgrade" 0
    [[ "$cmdoptions" =~ "|autoremove|" ]] && doapt "--yes autoremove" 0
    logtoboth "" "* apt maintenance Completed"
    exit 0
fi
logtoboth "" "* Start Phase 1 image customization"
#
# Set up ssh as requested
#
if [ "$ssh" == "" ]
then
    logtoboth "" "> Enable SSH service via /boot/ssh"
    touch /boot/ssh
elif [ "$ssh" == "socket" ]
then
    logtoboth "" "> Enable SSH via ssh.socket"
    systemctl enable ssh.socket > /dev/null 2>&1
    systemctl disable sshswitch.service > /dev/null 2>&1
elif [ "$ssh" == "none" ]
then
    logtoboth "" "> Disable SSH per command switch '--ssh none'"
    systemctl disable ssh.service > /dev/null 2>&1
fi
    
samepwd=""
puser="'pi'"
susers="user"
if [ $rootpwd -eq 1 -o "$myuser" != "" ]
then
    [ "$myuser" != "" ] && puser="${puser} and '$myuser'" && susers="users"
    [ $rootpwd -eq 1 ] && puser="${puser} and 'root'" && susers="users"

    if askyn "** Use same password for $susers $puser" "-n 1"
    then
	echo ""
	echo -n "Password: "
	samepwd="$(getpwd Password)"
    fi

    echo ""
    if [ $rootpwd -eq 1 ]
    then
	logtoboth "" "> Set root password"
	changepwd root "$samepwd"
    else
	logtoboth "" "> root password not set"
    fi


    if [ "$myuser" != "" ]; then
	[ "$myuid" != "" ] && xuid="--uid $myuid" || xuid=""
	logtoboth "" "> Add user '$myuser' and set password"
	# Use useradd/usermod so no prompts=adduser --disabled-login --no-create-home $xuid --add_extra_groups $myuser
	useradd -M -d /home/$myuser $xuid $myuser
	usermod --gid users $myuser
	usermod --groups dialout,cdrom,floppy,audio,video,plugdev,users $myuser
	changepwd $myuser "$samepwd"
	[ ! -d /home/$myuser ] && mkdir /home/$myuser
	chown -R $myuser.users /home/$myuser
	logtoboth "" "> Add user '$myuser' to sudoers.d"
	echo "$myuser ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/010_$myuser-nopasswd
	chmod 440 /etc/sudoers.d/010_$myuser-nopasswd
    fi
fi
logtoboth "" "> Change user 'pi' password"
changepwd pi "$samepwd"
logtoboth "" "> set /home/pi files ownership to 'pi.pi'"
chown -R pi.pi /home/pi
#
# Set up sdm-firstboot service. This service processes some settings that can only be done
# on the first boot of the system.
# Service will be enabled by creating run.firstboot when SD card is burned with sdm
#
logtoboth "" "> Configure sdm-firstboot service"
[ -f /etc/systemd/system/sdm-firstboot.service ] && rm -f /etc/systemd/system/sdm-firstboot.service
cat > /etc/systemd/system/sdm-firstboot.service <<EOF
[Unit]
Description=sdm System FirstBoot Configuration
After=network.target
#Before=rc-local.service

[Service]
Type=forking
ExecStart=/usr/local/sdm/sdm-firstboot
TimeoutSec=0
RemainAfterExit=yes
GuessMainPID=no

[Install]
WantedBy=multi-user.target
EOF
# Enable firstboot unless 'nofirstboot' set
if ! [[ "$poptions" =~ "|nofirstboot|" ]]
then
    systemctl enable sdm-firstboot > /dev/null 2>&1
    logtoboth "" "> Enable sdm-firstboot service"
else
    systemctl disable sdm-firstboot > /dev/null 2>&1
    logtoboth "" "> Disable sdm-firstboot service"
fi
#
# Set up apt-cacher-ng client if requested
#
if [ "$aptcache" != "" ]
then
    /usr/local/sdm/sdm-apt-cacher client $aptcache
    logtoboth "" "> Set image as apt-cacher-ng client using server $aptcache"
fi

if ! [[ "$poptions" =~ "|noupdate|" ]]
then
    logtoboth "" "> Start 'apt update'"
    doapt "update" $showapt
else
    logtoboth "" "> Skip 'apt update' per --poption 'noupdate'"
fi    

if [ "$cscript" != "" ]
then
    csfn="/usr/local/sdm/$(basename $cscript)"
    logtoboth "" "> Run Custom Phase Script '$csfn' Phase 1" 
    $csfn 1
else
    csfn=""
fi

#
# Set dhcpcd wait if requested
#
if [ "$dhcpcdwait" == "1" ]
then
    mkdir -p /etc/systemd/system/dhcpcd.service.d/
    if [ -f /etc/systemd/system/dhcpcd.service.d/wait.conf ]
    then
	logtoboth "" "%dhcpcd 'wait for network connection' is already enabled"
    else
	logtoboth "" "> Enable dhcpcd 'wait for network connection'"
	cat > /etc/systemd/system/dhcpcd.service.d/wait.conf << EOF
[Service]
ExecStart=
ExecStart=/usr/lib/dhcpcd5/dhcpcd -q -w
EOF
    fi
fi
#
# If --loadlocal wifi then disable dhcpcd now. Why wait 1:39 at boot time for nothing?
if [[ "$loadlocal" =~ "|wifi|" ]]
then
    logtoboth "" "> Disable dhcpcd per '--loadlocal wifi"
    logtoboth "" "  dhcpcd will be re-enabled at the end of First Boot"
    systemctl disable dhcpcd
fi
#
# I'm pretty sure that wpa_supplicant isn't needed. Let's disable it and see what happens
#
logtoboth "" "> Disable wpa_supplicant.service"
systemctl disable wpa_supplicant
#
# Handle system settings that can be done in Phase 1
# WiFi Country is done when the system first boots by sdm-firstboot
#
if [ "$locale" != "" ]
then
    logtoboth "" "> Set Locale to '$locale'"
    raspi-config do_change_locale "$locale" nonint
fi
if [ "$keymap" != "" ]
then
    logtoboth "" "> Set Keymap to '$keymap'"
    logtoboth "" ">!Ignore invoke-rc.d messages"
    raspi-config do_configure_keyboard "$keymap" nonint
fi
if [ "$timezone" != "" ]
then
    logtoboth "" "> Set Timezone to '$timezone'"
    raspi-config do_change_timezone "$timezone" nonint
fi

#
# These are enabled by use of the --poptions switch
# For example: --poptions apps          installs your personal set of apps
#              --poptions apps:xwindows installs apps and XWindows apps
#
didapt=0
if [[ "$poptions" =~ "|apps|" ]]
then
    doinstalls "$apps" "Application Installs"
    [ "$apps" != "" ] && didapt=1
fi
if [[ "$poptions" =~ "|xwindows|" ]] || [[ "$poptions" =~ "|xapps|" ]]
then
    doinstalls "$xapps" "xapp/XWindows Installs"
    [ "$xapps" != "" ] && didapt=1
fi
if [[ "$poptions" =~ "|samba|" ]]
then
    logtoboth "" "> Install Samba silently"
    hostname $thishost  # For some reason, debconf needs a valid hostname (on the network?) V strange
    echo "samba-common samba-common/workgroup string  WORKGROUP" | sudo debconf-set-selections
    echo "samba-common samba-common/dhcp boolean false" | sudo debconf-set-selections
    echo "samba-common samba-common/do_debconf boolean true" | sudo debconf-set-selections
    doapt "install -y samba" $showapt
    hostname sdm
    didapt=1
fi

[ $aptconfirm -eq 1 ] && yes="" || yes="-y"

if ! [[ "$poptions" =~ "|noupgrade|" ]]
then
    logtoboth "" "> Start 'apt upgrade'"
    doapt "$yes upgrade" $showapt
    didapt=1
else
    logtoboth "" "> Skip 'apt upgrade' per --poption 'noupgrade'"
fi    
if [ $didapt -eq 1 ]
then
    logtoboth "" "> Start 'apt autoremove'"
    doapt "autoremove -y" $showapt
fi
#
# If RasPiOS Full switch to console no login for first boot
#  and set to switch back to graphical autologin after first boot unless 1piboot has an uncommented boot_behav* 
#
if [ -f /usr/bin/startlxde-pi ]
then
    logtoboth "" "> Set RasPiOS Full to 'console no login' for First Boot"
    SUDO_USER=${myuser:-pi} raspi-config do_boot_behaviour B1 nonint > /dev/null 2>&1
    if (grep '^boot_behav' /etc/sdm/1piboot.conf > /dev/null 2>&1) || (grep '^boot_behav' /etc/sdm/auto-1piboot.conf > /dev/null 2>&1)
    then
	logtoboth "" ">%1piboot.conf 'boot_behaviour' setting will be honored after First Boot"
    else
	logtoboth "" ">%Desktop Autologin will be re-enabled after First Boot"
	echo "boot_behaviour=B4" >> /etc/sdm/auto-1piboot.conf
    fi
fi

logtoboth "" "* Phase 1 Completed"

[ "$csfn" != "" ] && logtoboth "" "> Run Custom Phase Script '$csfn' post-install" && $csfn post-install

echo ""
if [ $batch -eq 0 ]
then
    logtoboth "" "* Enter Shell Command Prompt"
    IFS=":" read efg ebg ecursor <<< $ecolors
    stermcolors "$efg" "$ebg" "$ecursor" x1
    bash -i
    resetcolors x1
else
    logtoboth "" "* Batch Mode exit"
    echo ""
fi

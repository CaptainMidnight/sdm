#!/bin/bash
#
#
# Manage, customize, or burn an SSD or SD Card from a RasPiOS image
#
# Useful for maintaining one or more Pis. The general idea is to keep a "golden" image
# fully configured to suit your needs. Then, whenever you need a new SSD or SD Card (testing, new Pi, etc),
# start with the golden master. Also, when new RasPiOS releases come out, sdm can be used
# to easily build a fresh image for the new release.
#
# This script provides the infrastructure for your customization scripts to work
# in a repeatable manner against an RPF-provided IMG file. 
#
# sdm [switches] image-name
# sdm --help will provide help on all available switches
#
# RPi Image management phases. See README.md for details
# Phase   Tasks
#     0   Copy files into unzipped IMG file (sdm calls phase0 script)
#         IMG file mounted so files can easily be copied into the IMG file
#     1   Nspawn into image to execute in the image context (via sdm)
#         APT packages can be installed in phase 1 so available on every SD card
#         Your custom script can be as automatic or manual as you choose
#         See sdm-customphase for an example
#     2   Write SSD or SD card from the IMG file (via sdm --burn)
#         Target system name is inserted onto the device after it's written
#     3   Boot the newly-created storage device
#

function errexit() {
    echo "$1"
    ismounted /mnt/sdm && docleanup
    exit 1
}

function exitiferr() {
    [ "${1:0:1}" == "?" ] && errexit "$1"
}

function docleanup() {
    umount -v /mnt/sdm/{boot,}
    [ "$loop" != "" ] && losetup -d $loop
    sync
}

function ismounted() {
    if grep -qs $1 /proc/mounts
    then
	return 0
    else
	return 1
    fi
}

function domount() {
    [ ! -d /mnt/sdm ] && mkdir /mnt/sdm
    if [ $dimgdev -eq 0 ]
    then
	echo "Mounting IMG '$dimg'"
	loop=$(losetup --show -P -f $dimg)
	mount -v ${loop}p2 /mnt/sdm
	mount -v ${loop}p1 /mnt/sdm/boot
    else
	echo "Mounting device '$dimg'"
	mount -v ${dimg}2 /mnt/sdm
	mount -v ${dimg}1 /mnt/sdm/boot
	loop=""
    fi
}

function checknumeric() {
    #
    # Exit with error if $1 is not numeric
    #
    [[ "$1" = *[^0-9]* ]] && errexit "? Value '$1' for command switch '$2' is not numeric"
    return
}

function fndotfullpath() {
    #
    # Fix directory if it's "."
    #
    local fn="$1"
    if [ "$fn" != "" ]
    then
	[ "$(dirname $fn)" == "." ] && fn="$(pwd)/$fn"    # Ensure fully qualified path to cscript
    fi
    echo $fn
}

function extendimage() {
    local ldimg=$1 limgext=$2
    local line dsiz
    dd if=/dev/zero bs=1M count=$limgext status=progress >> $ldimg

    # Get the actual size of the image file from parted
    while read line ; do
	if [[ "$line" =~ "Disk" ]] 
	then
	    if [[ ! "$line" =~ "Flags:" ]]   # Only want the Disk size line, not one with "Disk Flags"
	    then
                                     # Disk img-file-name.img:    nnnnMB
		dsiz="${line##*:}"   # Get String following ":"
		dsiz="${dsiz##\ }"   # Strip leading spaces
		dsiz="${dsiz%%\ }"   # Strip trailing spaces
	    fi
	fi
    done < <(parted $ldimg <<EOF
print
EOF
) # This closes the above parted command
    echo "Resize partition 2 and file system"
    parted $ldimg <<EOF
resizepart 2 $dsiz
EOF
}

function poptcheck() {
    #
    # Check options settings against valid settings
    # Report errors and exit
    #
    local popt="$1" vopt="$2" switchname="$3" badopt="" nopt=""
    if [ "$popt" != "" ]
    then
	readarray -d, xopt <<< $popt
	for o in ${xopt[@]}
	do
	    os="${o%,}"
	    os="${os# }"
	    if ! [[ "$vopt" =~ "|$os|" ]]
	    then
		[ "$badopt" != "" ] && badopt="$badopt, '$os'" || badopt="'$os'"
	    else
		nopt="$nopt|$os"
	    fi
	done
	[ "$badopt" != "" ] && echo "? Unrecognized $switchname value(s) $badopt" || echo "$nopt|"
    else
	echo ""
    fi
}

function findappfile() {
    #
    # $1 = app/xapp variable
    # $2 = app/xapp output variable
    #
    # Updates app/xapp output variable with actual file location
    # or the value of $1 if it's not a file location (no leading '@')
    #
    if [ "${1:0:1}" == "@" ]
    then
	fn="${1:1:999}"
	fn="$(fndotfullpath $fn)"
	if [ ! -f "$fn" ]
	then
	    fnc="$src/$(basename $fn)"
	    if [ ! -f "$fnc" ]
	    then
		echo "? $2 file '$fn' not found"
		return
	    else
		echo "@$fnc"
	    fi
	else
	    echo "@$fn"
	fi
    else
	echo "$1"
    fi
}

function getapplist() {
    #
    # $1 has list of apps or @file with list of apps
    # $2 has variable name to set with list of apps
    #
    local lapps=""
    if [ "${1:0:1}" == "@" ]
    then
	fn="${1:1:999}"
	while read line
	do
	    #
	    # Strip trailing spaces, tabs, and comments
	    #
            newapp="${line%%\#*}"    # Del EOL comments
            newapp="${newapp%"${newapp##*[^[:blank:]]}"}"  # Del trailing spaces/tabs
	    [ "$newapp" != "" ] && lapps="$lapps $newapp"
	done < $fn
    else
	lapps="$1"
    fi
    lapps="${lapps## }"      # Del leading spaces
    echo "$lapps"
}

function readl10n() {
    #
    # Get the L10N config from the running system
    # Sets: locale, timezone, wificountry, keymap
    #
    local tz=$(realpath /etc/localtime)
    # Keyboard
    source /etc/default/keyboard
    keymap="$XKBLAYOUT"
    # Locale
    source /etc/default/locale
    locale="$LANG"
    # Timezone
    timezone=${tz##/usr/share/zoneinfo/}
    # WiFi Country
    [ -f /etc/wpa_supplicant/wpa_supplicant.conf ] && IFS="=" read a wificountry <<<$(grep 'country=' /etc/wpa_supplicant/wpa_supplicant.conf)
    [ "$wificountry" == "" -a -f /etc/wpa_supplicant/wpa_supplicant-wlan0.conf ] && IFS="=" read a wificountry <<<$(grep 'country=' /etc/wpa_supplicant/wpa_supplicant-wlan0.conf)
}

function setbootset() {
    #
    # Handle --bootset, --svcdisable and --svcenable for customize and burn commands
    #
    if [ "$bootsetpairs" != "" ]
    then
	readarray -d, citems <<< $bootsetpairs
	for c in ${citems[@]}
	do
	    IFS=":=" read key value <<< $c
	    value="${value%,}"
	    ! [[ "$vbootset" =~ "|$key|" ]] && errexit "? Unrecognized --bootset key '$key'"
	    # Remove any old entry for this key and write the new one
	    sed -i "/^$key=/d" /mnt/sdm/etc/sdm/auto-1piboot.conf
	    echo "$key=$value" >> /mnt/sdm/etc/sdm/auto-1piboot.conf
	done
    fi
    if [ "$svcdisable" != "" ]
    then
	readarray -d, citems <<< $svcdisable
	for c in ${citems[@]}
	do
	    sed -i "/^service-enable=${c%,}/d" /mnt/sdm/etc/sdm/auto-1piboot.conf
	    echo "service-disable=${c%,}" >> /mnt/sdm/etc/sdm/auto-1piboot.conf
	done
    fi
    if [ "$svcenable" != "" ]
    then
	readarray -d, citems <<< $svcenable
	for c in ${citems[@]}
	do
	    sed -i "/^service-disable=${c%,}/d" /mnt/sdm/etc/sdm/auto-1piboot.conf
	    echo "service-enable=${c%,}" >> /mnt/sdm/etc/sdm/auto-1piboot.conf
	done
    fi

}

function writeconfig() {
    #
    # Write config parameters into the image
    #
    [ -f $paramfile ] && rm -f $paramfile
    cat > $paramfile <<EOF
#Arguments passed from sdm into the IMG on $(date +'%Y-%m-%d %H:%M:%S')
version:$version
apps:"$apps"
xapps:"$xapps"
appfile:$appfile
xappfile:$xappfile
apip:$apip
apssid:$apssid
aptcache:$aptcache
aptconfirm:$aptconfirm
batch:$fbatch
bootadd:$bootadd
bootconfig:$bootconfig
bootscripts:$bootscripts
cscript:$cscript
csrc:$csrc
datefmt:$datefmt
dhcpcd:$dhcpcd
dhcpcdwait:$dhcpcdwait
ecolors:$ecolors
eeprom:$eeprom
exports:$exports
fstab:$fstab
hdmiforcehotplug:$hdmiforcehotplug
hdmigroup:$hdmigroup
hdmimode:$hdmimode
keymap:$keymap
loadlocal:$loadlocal
locale:$locale
myuid:$myuid
myuser:$myuser
pi1bootconf:$pi1bootconf
poptions:$poptions
reboot:$reboot
noreboot:$noreboot
rebootwait:$rebootwait
rootpwd:$rootpwd
showapt:$showapt
src:$src
ssh:$ssh
sysctl:$sysctl
timezone:$timezone
wificountry:$wificountry
wpaconf:$wpaconf
fnowpa:$fnowpa
custom1:$custom1
custom2:$custom2
custom3:$custom3
custom4:$custom4
thishost:$thishost
EOF
}

#
# Initialize and Parse the command
#
#
version="V3.15"
sdmcommandline="$0 $@"      #Used in error messages
apip="10.1.1.1"             #Default IP for the WiFi Captive Portal
apssid="sdm"                #Default SSID for the WiFi Captive Portal
apps=""                     #List of apps to install in sdm-base-installs
aptcache=""                 #IP address of apt-cacher-ng server
aptconfirm=0                #1=Pause before apt commands in sdm-apt-install and sdm-X-install
aptmaint=""                 #--aptmaint switch values
aptfunction=0               #1=Some apt batch function specified
bootadd=""                  #Items to add to /boot/config.txt
bootconfig=""               #/boot/config.txt items to set
bootscripts=0               #Run FirstBoot custom boot scripts
bootsetpairs=""             #Keys and values from --bootet
burn=0                      #1=Burn the image to the SD card
burndev=""                  #SD card device name for --burn
burnfile=0                  #1=Burn image to a file
burnfilefile=""             #Filename for --burnfile
csrc=""                     #Source directory for use by Custom Phase script
cscript=""                  #Custom Phase script
datefmt="%Y-%m-%d %H:%M:%S" #Default date format for history log
ddsw="bs=16M oflag=direct"  #Switches for dd
dhcpcd=""                   #Append this custom dhcpcd.conf to /etc/dhcpcd.conf
dhcpcdwait=0                #1=Enable wait for internet (like raspi-config System Options 'wait for network connection')
ecolors="blue:gray:red"     #fg:bg:cursor
eeprom=""                   #If set, edit /etc/default/rpi-eeprom-update
exports=""                  #If set, copy file to /etc/exports
fcustomize=0                #True if customizing an image (either --customize or lack of burn,mount,explore)
fbatch=0                    #1=nspawn "batch" mode (non-interactive). Do Phase1 and exit
fdomount=0                  #1=Do a mount and drop into bash
fexplore=0                  #1=Just fire up nspawn to explore the system
fextendonly=0               #1=extend image by xmb MB and then exit
fnowpa=0                    #1=I really man no automatic no wpa config
fphase1=0                   #Perform Phase 1 in the image
fstab=""                    #Append this custom fstab to /etc/fstab
hdmiforcehotplug=0          #1=Enable hdmi_force_hotplug in /boot/config.txt
hdmigroup=""                #If set, edit /boot/config.txt and set
hdmimode=""                 #If set, edit /boot/config.txt and set
hname=""                    #Host name when using --burn
imgext=2048                 #Number of MB to extend IMG (2048MB = 2GB)
keymap=""                   #Keyboard configuration
infocmd=0                   #1=--info command
loadl10n=0                  #1=Load Localization settings from running system 
loadlocal=""                #Non-null specifies loading wifi creds on firstboot (currently USB only)
locale=""                   #Locale
myuser=""                   #Non-root user to create. Default is no non-root user created
myuid=""                    #UID for non-root user if created
noextend=0                  #1=Do not extend image
noreboot=0                  #1=Do not restart system after first boot
nspawnsw=""                 #Switches for nspawn
poptions=""                 #Phase options
pvers=0                     #Print version number
reboot=0                    #1=Reboot from First Boot
rebootwait=20               #Number of seconds to wait after systemd thinks system is fully booted to reboot
drebootwait=$rebootwait     # Used to see if rebootwait should be modified on burn
ssh=""                      #--ssh none (no ssh) or --ssh socket (ssh via sockets)
                            #  Default is to write /boot/ssh
sysctl=""                   #Copy named file to /etc/sysctl.d
timezone=""                 #Timezone setting
wificountry=""              #WiFi country setting
vaptmaintops="|update|upgrade|autoremove|" #Options for --apt
vpoptions="|apps|nofirstboot|noupdate|noupgrade|samba|xwindows|xapps|" #Valid --poptions
vbootset="|boot_splash|boot_wait|camera|i2c|net_names|onewire|rgpio|serial|spi|blanking|overscan|pixdub|audio|pi4video|boot_behaviour|overclock|boot_order|"
vloadopts="|usb|wifi|flashled|internet|"  #Valid options for --loadlocal
rootpwd=0                   #1=Set root password as well
showapt=0                   #1=Display apt output on terminal as well as logging
xapps=""                    #List of X apps to install in sdm-X-installs
pi1bootconf=""              #Command-line specified 1piboot.conf file to use
wpaconf=""                  #Command-line specified wpa_supplicant.conf
custom1=""                  #For custom use
custom2=""                  #For custom use
custom3=""                  #For custom use
custom4=""                  #For custom use
#
# custom.ized is created in the image so that the Phase 0 customization only done once automatically
#
sdmdone="/mnt/sdm/etc/sdm/custom.ized"
paramfile="/mnt/sdm/etc/sdm/cparams"

[[ ! $EUID -eq 0 ]] && errexit "? Please run as root: sudo $0 $*"
[ "$(which systemd-nspawn)" == "" ] && echo "? Cannot find systemd-nspawn" && errexit "? Please 'sudo apt install systemd-container' first"
#
# Parse the command line
#
cmdline="$0 $*"
longopts="help,1piboot:,apps:,aptcache:,aptconfirm,aptmaint:,apip:,apssid:,\
batch,bootadd:,bootconfig:,bootscripts,bootset:,burn:,burnfile:,\
cscript:,csrc:,customize,datefmt:,ddsw:,dhcpcd:,dhcpcdwait,ecolors:,eeprom:,explore,exports:,extend,\
fstab:,hdmi-force-hotplug,hdmigroup:,hdmimode:,host:,hostname:,info,keymap:,l10n,loadlocal:,locale:,\
mcolors:,mount,noextend,norestart,noreboot,nspawnsw:,poptions:,reboot:,restart,\
rootpwd,showapt,ssh:,svcdisable:,svcenable:,sysctl:,timezone:,uid:,user:,\
wifi-country:,wificountry:,xapps:,xmb:,\
custom1:,custom2:,custom3:,custom4:,version,nowpa,wpa:"

OARGS=$(getopt -o h --longoptions $longopts -n 'sdm' -- "$@")
[ $? -ne 0 ] && errexit "? $0: Unable to parse command"
eval set -- "$OARGS"

while true
do
    case "${1,,}" in
	# 'shift 2' if switch has argument, else just 'shift'
	--1piboot)     pi1bootconf=$2; shift 2 ;;
	--apip)        apip=$2       ; shift 2 ;;
	--apssid)      apssid=$2     ; shift 2 ;;
	--apps)        apps=$2       ; shift 2 ;;
	--aptcache)    aptcache=$2   ; shift 2 ;;
	--aptconfirm)  aptconfirm=1  ; shift ;;
	--aptmaint)    aptmaint="${2,,}"; shift 2 ;;
	--batch)       fbatch=1      ; shift ;;
	--bootadd)     bootadd=$2    ; shift 2 ;;
	--bootconfig)  bootconfig=$2 ; shift 2 ;;
	--bootscripts) bootscripts=1 ; shift 1 ;;
	--bootset)     bootsetpairs=$2 ; shift 2 ;;
	--burn)        burn=1 ;
		       burndev=$2    ; shift 2 ;;
	--burnfile)    burnfile=1 ;
		       burnfilefile=$2 ; shift 2 ;;
	--cscript)     cscript=$2    ; shift 2 ;;
	--csrc)        csrc=$2       ; shift 2 ;;
	--customize)   fcustomize=1  ; shift 1 ;;
	--datefmt)     datefmt=$2    ; shift 2 ;;
	--ddsw)        ddsw=$2       ; shift 2 ;;
	--dhcpcd)      dhcpcd=$2     ; shift 2 ;;
	--dhcpcdwait)  dhcpcdwait=1  ; shift 1 ;;
	--ecolors)     ecolors=$2    ; shift 2 ;;
	--eeprom)      eeprom=$2     ; shift 2 ;;
	--explore)     fexplore=1    ; shift ;;
	--exports)     exports=$2    ; shift 2 ;;
	--extend)      fextendonly=1 ; shift ;;
	--fstab)       fstab=$2      ; shift 2 ;;
	--hdmi-force-hotplug) hdmiforcehotplug=1 ; shift 1 ;;
	--hdmigroup)   hdmigroup=$2  ; shift 2 ;;
	--hdmimode)    hdmimode=$2   ; shift 2 ;;
	--hostname|--host) hname=$2  ; shift 2 ;;
	--keymap)      keymap=$2     ; shift 2 ;;
	--l10n)        loadl10n=1    ; shift 1 ;;
	--info)        infocmd=1     ; shift 1 ;;
	--loadlocal)   loadlocal="${2,,}" ; shift 2 ;;
	--locale)      locale=$2     ; shift 2 ;;
	--mcolors)     mcolors=$2    ; shift 2 ;;
	--mount)       fdomount=1    ; shift ;;
	--noextend)    noextend=1    ; shift ;;
	--norestart|--noreboot) noreboot=1 ; shift ;;
	--nowpa)       fnowpa=1      ; shift ;;
	--nspawnsw)    nspawnsw=$2   ; shift 2 ;;
	--phase1)      fphase1=1     ; shift 1 ;;
	--poptions)    poptions="${2,,}" ; shift 2 ;;
	--reboot)      rebootwait=$2 ;
		       reboot=1      ; shift 2 ;;
	--restart)      reboot=1     ; shift 1 ;;
	--rootpwd)     rootpwd=1     ; shift ;;
	--showapt)     showapt=1     ; shift ;;
	--ssh)         ssh=$2        ; shift 2 ;;
	--svcdisable)  svcdisable=$2 ; shift 2 ;;
	--svcenable)   svcenable=$2  ; shift 2 ;;
	--sysctl)      sysctl=$2     ; shift 2 ;;
	--timezone)    timezone=$2   ; shift 2 ;;
	--uid)         myuid=$2      ; shift 2 ;;
	--user)        myuser=$2     ; shift 2 ;;
	--wifi-country|--wificountry) wificountry=${2^^} ; shift 2 ;;
	--wpa)         wpaconf=$2    ; shift 2 ;;
	--xapps)       xapps=$2      ; shift 2 ;;
	--xmb)         imgext=$2     ; shift 2 ;;
	--custom1)     custom1=$2    ; shift 2 ;;
	--custom2)     custom2=$2    ; shift 2 ;;
	--custom3)     custom3=$2    ; shift 2 ;;
	--custom4)     custom4=$2    ; shift 2 ;;
	--version)     pvers=1       ; shift ;;
	--)            shift ; break ;;
	-h|--help)     echo "sdm $version" ;
echo "" ;
echo "Usage:" ;
echo "sudo /usr/local/sdm/sdm [switches] disk-image-file" ;
echo "Customize a storage image (no --burn, --explore, or --extend)" ;
echo "   sudo /usr/local/sdm/sdm sd-image-file" ;
echo " or drop into an nspawn shell in the image (--explore)" ;
echo "   sudo /usr/local/sdm/sdm --explore sd-image-file" ;
echo " or burn an image to an storage device (--burn)" ;
echo "   sudo /usr/local/sdm/sdm --burn /dev/sdx --host target-hostname sd-image-file" ;
echo " or mount an image into file system for inspection/modification (Be VERY Careful!)" ;
echo "   sudo /usr/local/sdm/sdm --mount sd-image-file" ;
echo "" ;
echo "Switches" ;
echo " --1piboot conf-file Use alternate 1piboot.conf" ;
echo " --apip IPADDR       IP Address for WiFi Captive Portal [10.1.1.1]" ;
echo " --apssid ssidname   SSID name for WiFi Captive Portal [sdm]" ;
echo " --burn devname      Copy the image to the storage device" ;
echo " --burnfile filename Create a ready-to-burn customized Image file" ;
echo " --host hostname     Hostname to burn into the image with --burn" ;
echo " --explore           Explore (nspawn shell) into image" ;
echo " --info what         Display list of Locales, Keymaps, WiFi Countries, or Timezones" ;
echo " --mount             Mount IMG file partitions and drop into bash" ;
echo " --datefmt str       Date format for logs [%Y-%m-%d %H:%M:%S]" ;
echo "  * Customization switches (no --burn, --explore, or --mount) *" ;
echo " --apps applist      List of app packages to install or @file with list" ;
echo " --xapps applist     List of X11 packages to install or @file with list" ;
echo " --aptcache serverip Use apt-cacher-ng with server 'serverip'" ;
echo " --aptconfirm        Enable confirmation before apt commands" ;
echo " --aptmaint options  Do apt commands batch-mode in the image (update, upgrade, autoremove)" ;
echo " --batch             Perform customize operation and exit" ;
echo " --bootadd key:value,key:value,... Add new keys and values to /boot/config.txt" ;
echo " --bootconfig key:value,key:value,... Update and uncomment items in /boot/config.txt" ;
echo " --bootset key:value,key:value,.. Set boot-time device settings (see README)" ;
echo " --cscript script    Custom Phase Configuration script" ;
echo " --csrc dir          Source directory passed for Custom Phase scripts" ;
echo " --custom[1-4] str   Can be used in Custom cscripts" ;
echo " --ddsw str          Switches for dd command [bs=16M oflag=direct]" ;
echo " --dhcpcd file       Append file to /etc/dhcpcd.conf" ;
echo " --ecolors fg:bg:cur Set fg/bg/cursor colors when operating in the mounted IMG" ;
echo " --eeprom str        Set the Pi eeprom directory" ;
echo " --exports file      Copy named file to /etc/exports" ;
echo " --extend            Only extend the image; no other customizations" ;
echo " --noextend          Do not extend the image when doing customizations" ;
echo " --fstab file        Append file to /etc/fstab" ;
echo " --hdmi-force-hotplug Set hdmi_force_hotplug=1 in /boot/config.txt" ;
echo " --hdmigroup n       Set /boot/config.txt hdmigroup value" ;
echo " --hdmimode n        Set /boot/config.txt hdmimode value" ;
echo " --host hostname     Hostname to write onto the storage device with --burn" ;
echo " --keymap keymapname Set keymap" ;
echo " --loadlocal args    Load WiFi Credentials from USB stick during first boot (see README)" ;
echo " --locale localename Set the locale";
echo " --mcolors fg:bg:cur Set fg/bg/cursor colors when operating in --mount" ;
echo " --nspawnsw str      Additional switches for nspawn command" ;
echo " --poptions str      Set Phase 1 auto-run options" ;
echo " --norestart         Do not restart after first boot" ;
echo " --phase1            Run sdm Phase 1" ;
echo " --reboot n          Restart the first boot of the system after n seconds" ;
echo " --restart           Restart the first boot of the system" ;
echo " --rootpwd           Set a root password into the image" ;
echo " --showapt           Display apt output as well as logging it" ;
echo " --ssh none|socket   No ssh or ssh sockets [Default: ssh service]" ;
echo " --svcdisable svc1,svc2,... Disable the named services" ;
echo " --svcenable  svc1,svc2,... Enable  the named services" ;
echo " --sysctl file       Copy the named file to /etc/sysctl.d" ;
echo " --timezone tzname   Set the timezone" ;
echo " --uid uid           UID for non-root user [next free]" ;
echo " --user username     Non-root user to create" ;
echo " --wifi-country country Set WiFi country for unblocking WiFi" ;
echo " --wpa wpaconf       wpa_supplicant.conf file to use" ;
echo " --nowpa             Do not do WPA config file processing" ;
echo " --xmb n             Extend image file by n MB [2048]" ;
echo " --version           Print sdm version number" ;
shift ; exit ;;
	*) errexit "? $0: Internal error" ;;
    esac
done

dimg="$1"
src=$(dirname $0)
[ $pvers -eq 1 ] && echo "sdm $version" && exit 0
source /usr/local/sdm/sdm-cparse           # Get function defs

#
# Adjust settings based on switches and check for conflicting switches
# and erroneous switch values
#
[ $fexplore -eq 1 ] && noextend=1

if [ "$cscript" != "" ]
then
    if [ ! -x "$cscript" ]
    then
	fn="$src/$(basename $cscript)"
	if [ -x "$fn" ]
	then
	    cscript=$fn
	fi
    fi
fi
#
# Handle --info switch right now. $dimg has the requested info item (timezones, locales, keymaps, wifi-countries)
#
if [ $infocmd -eq 1 ]
then
    case "${dimg,,}" in
	time*)
	    less /usr/share/zoneinfo/zone1970.tab ;;
	local*)
	    less /usr/share/i18n/SUPPORTED ;;
	key*)
	    less /usr/share/doc/keyboard-configuration/xorg.lst ;;
	wifi*)
	    less /usr/share/zoneinfo/iso3166.tab ;;
	help|*)
	    [ "${dimg,,}" != "help" ] && echo "? Unrecognized --info option '$dimg'" ;
	    echo "" ;
	    echo "The --info command accepts one of four switch values:" ;
	    echo "timezone:     Show --timezone values";
	    echo "locale:       Show --locale values" ;
	    echo "keymap:       Show --keymap values" ;
	    echo "wifi-country: Show --wifi-country values" ;
	    echo "" ;
	    echo "Keys can be abbreviated to 'time', 'local', 'key', and 'wifi'" ;
	    ;;
	*)
    esac
exit 0
fi

cscript="$(fndotfullpath $cscript)"
[ $burn -eq 1 -a $burnfile -eq 1 ] && errexit "? Switch conflict: --burn and --burnfile"
[ $burn -eq 1 -o $burnfile -eq 1 ] && burning=1 || burning=0
[ $burning -eq 1 -a $fdomount -eq 1 ] && errexit "? Switch conflict: --burn|--burnfile and --mount"
[ $burning -eq 1 -a $fexplore -eq 1 ] && errexit "? Switch conflict: --burn|--burnfile and --explore"
[ $fdomount -eq 1 -a $fexplore -eq 1 ] && errexit "? Switch conflict: --mount and --explore"
[ $reboot -eq 1 -a $noreboot -eq 1 ] && errexit "? Switch conflict: --restart and --norestart"
[ $fcustomize -eq 1 -a $burning -eq 1 ] && errexit "? Switch conflict: --customize and --burn|--burnfile"
[ $fcustomize -eq 1 -a $fdomount -eq 1 ] && errexit "? Switch conflict: --customize and --mount"
[ $fcustomize -eq 1 -a $fexplore -eq 1 ] && errexit "? Switch conflict: --customize and --explore"
if [ "$aptmaint" != "" ]
then
    [ $(($burning+$fdomount+$fexplore+$fcustomize)) -gt 0 ] && errexit "? One or more switches conflict with --aptmaint"
    aptfunction=1
fi
# Force customize if none of burn, mount, or explore
[ $burning -ne 1 -a $fdomount -ne 1 -a $fexplore -ne 1 ] && fcustomize=1
[ "$src" != "" -a ! -d "$src" ] && errexit "? Source directory '$src' not found"
[ "$csrc" != "" -a ! -d "$csrc" ] && errexit "? Custom source directory '$csrc' not found"
[ "$cscript" != "" -a ! -f "$cscript" ] && errexit "? Custom Phase Script '$cscript' not found"
[ "$cscript" != "" -a ! -x "$cscript" ]  && errexit "? Custom Phase Script '$cscript' not executable"
p1bootconf="$(fndotfullpath $p1bootconf)"
[ "$pi1bootconf" != "" -a ! -f "$pi1bootconf" ] && errexit "? Custom 1piboot.conf file '$pi1bootconf' not found"
if [ "$ssh" != "" ]
then
    [[ ! "|none|socket|" =~ "|$ssh|" ]] && errexit "? Unknown value '$ssh' for --ssh"
fi
[ "$rebootwait" != "" ] && checknumeric "$rebootwait" "--reboot"
[ "$hdmigroup" != "" ] && checknumeric "$hdmigroup" "--hdmigroup"
[ "$hdmimode" != "" ] && checknumeric "$hdmimode" "--hdmimode"
[ "$myuid" != "" ] && checknumeric "$myuid" "--uid"
[ "$imgext" != "" ] && checknumeric "$imgext" "--xmb"
[ "$hdmimode" != "" -a "$hdmigroup" == "" ] && errexit "? --hdmimode set but not --hdmigroup"
[ "$hdmigroup" != "" -a "$hdmimode" == "" ] && errexit "? --hdmigroup set but not --hdmimode"
! cktimezone $timezone && errexit "? Unknown Timezone '$timezone'"
! ckwificountry $wificountry && errexit "? Unknown WiFi Country '$wificountry'"
! cklocale $locale && errexit "? Unknown Locale '$locale'"
! ckkeymap $keymap && errexit "? Unknown Keymap '$keymap'"

poptions=$(poptcheck "$poptions" "$vpoptions" "--poption")
exitiferr "$poptions"
loadlocal=$(poptcheck "$loadlocal" "$vloadopts" "--loadlocal")
exitiferr "$loadlocal"
aptmaint=$(poptcheck "$aptmaint" "$vaptmaintops" "--aptmaint")
exitiferr "$aptmaint"
#
# Check sanity of the disk image argument
#
[ "$dimg" == "" ] && errexit "? No disk image specified"
if [ ! -f "$dimg" ]
then
    [ ! -b $burndev ] && errexit "? Disk image file '$dimg' does not exist"
    [ $fdomount -eq 0 -a $fexplore -eq 0 ] && errexit "? Command cannot operate on device '$dimg'"
    dimgdev=1
else
    dimgdev=0
fi    

if [ $aptfunction -eq 1 ]
then
    noextend=1
    fextendonly=1
    fnowpa=1
fi

[ "$wpaconf" != "" -a ! -f "$wpaconf" ] && errexit "? wpa_supplicant config file '$wpaconf' not found"
[ $fcustomize -eq 1 -a "$wpaconf" == "" -a $fnowpa -ne 1 ] && errexit "? Use --nowpa for no automatic wpa processing or --wpa to specify your wpa_supplicant.conf"
if [ "$eeprom" != "" ]
then
    if [[ ! "|critical|stable|beta|" =~ "|$eeprom|" ]]
    then
	echo "% --eeprom value '$eeprom' is not one of the standard 'critical/stable/beta'. Continuing..."
    fi
fi    
[ "$dhcpcd" != ""  -a ! -f "$dhcpcd" ]  && errexit "? --dhcpcd file '$dhcpcd' not found"
[ "$exports" != "" -a ! -f "$exports" ] && errexit "? --exports file '$exports' not found"
[ "$sysctl" != ""  -a ! -f "$sysctl" ]  && errexit "? --sysctl file '$sysctl' not found"
[ "$sysctl" != ""  -a "$sysctl" == "${sysctl%%.conf}" ] && errexit "? --sysctl file '$sysctl' must have file type '.conf'"
#
# parse and set ecolors
#
[ "$ecolors" == "" ] && ecolors="blue:gray:red"
IFS=":" read efg ebg ecursor <<< $ecolors
[ "$efg" == "" ] && efg="blue"
[ "$ebg" == "" ] && ebg="gray"
[ "$ecursor" == "" ] && ecursor="red"
ecolors="$efg:$ebg:$ecursor"

#
# Process --apps and --xapps switches
#
appfile="$(findappfile $apps)" #Gets real @file nam or list of apps into '$appfile'
exitiferr "$appfile"
apps="$(getapplist $appfile)"    #Gets definitive app list into '$apps'
xappfile="$(findappfile $xapps)" #Ditto for xappfile and xapps
exitiferr "$xappfile"
xapps="$(getapplist $xappfile)"
#
# Process the command. Actions are burn, burnfile, mount, extend, explore, or customize
#
thishost="$(hostname)"
if [ $burning -eq 1 ]
then
    [ ! -d /mnt/sdm ] && mkdir /mnt/sdm
    if [ $burn -eq 1 ]
    then
	#
	# Burning to a device
	#
	[ "$burndev" == "" ] && errexit "? No storage device specified"
	ismounted $burndev && errexit "? Device '$burndev' is mounted"
	[ ! -b $burndev ] && errexit "? '$burndev' is not a block device"
	[ "$hname" == "" ] && echo "% hostname not specified with --host; hostname will not be written to $burndev"
	# Stash burn messages in an array until log on SD Card is mounted and available 
	declare -a burnmsg
	burnmsg+=("$(thisdate) * Burn '$dimg' to SD Card '$burndev'")
	burnmsg+=("$(thisdate) > Burn command line: $cmdline")
	echo "* Burn '$dimg' to '$burndev'..."
	ddcmd="dd if=$dimg of=$burndev status=progress $ddsw"
	burnmsg+=("$(thisdate) > dd command: $ddcmd")
	echo "$ddcmd"
	$ddcmd
	[ $? -ne 0 ] && errexit "? Exiting due to dd error"
	burnmsg+=("$(thisdate) > dd Copy completed")
	# Prevent mount errors
	sync ; sync
	sleep 1
	mount -v ${burndev}2 /mnt/sdm
	! ismounted ${burndev}2 && errexit "? Unable to mount ${burndev}2"
    else
	#
	# Burning to a file
	#
	[ "$burnfilefile" == "" ] && errexit "? No Output Image file specified"
	[ -f $burnfilefile ] && errexit "? Output Image file '$burnfilefile' exists"
	[ "$hname" == "" ] && echo "% hostname not specified with --host; hostname will not be written the Output Image"
	# Stash burn messages in an array until log on SD Card is mounted and available 
	declare -a burnmsg
	burnmsg+=("$(thisdate) * Burn '$dimg' to Output Image '$burnfilefile'")
	burnmsg+=("$(thisdate) > Burn Image command line: $cmdline")
	echo "* Burn '$dimg' to Output Image '$burnfilefile'..."
	ddcmd="dd if=$dimg of=$burnfilefile status=progress $ddsw"
	burnmsg+=("$(thisdate) > dd command: $ddcmd")
	echo "$ddcmd"
	$ddcmd
	[ $? -ne 0 ] && errexit "? Exiting due to dd error"
	burnmsg+=("$(thisdate) > Image copy completed")
	domount "$burnfilefile"
    fi
    #
    # Set hostname into the image
    #
    if [ "$hname" != "" -a -f /mnt/sdm/etc/hostname ]
    then
	[ $burn -eq 1 ] && burnmsg+=("$(thisdate) > Set hostname '$hname' onto the storage") || burnmsg+=("$(thisdate) > Set hostname '$hname' in Output Image")
	echo $hname > /mnt/sdm/etc/hostname
	sed -i "s/127.0.1.1.*raspberrypi/127.0.1.1\t$hname/g" /mnt/sdm/etc/hosts
    fi
    if [ -d /mnt/sdm/usr/local/sdm -a -d /mnt/sdm/etc/sdm ]
    then
	# Save settings made with the --burn command
	bapip=$apip
	bapssid=$apssid
	bdhcpcd=$dhcpcd
	bexports=$exports
	bsysctl=$sysctl
	breboot=$reboot
	bnoreboot=$noreboot
	brebootwait=$rebootwait
	bscript=$bootscripts
	bwificountry="$wificountry"
	blocale="$locale"
	bkeymap="$keymap"
	btimezone="$timezone"
	bwpaconf="$wpaconf"
	readparams /mnt/sdm                    # Read settings from the SD card
        [ $breboot -eq 1 ] && reboot=$breboot
	[ $bnoreboot -eq 1 ] && reboot=0 && noreboot=1
        [ $bscript -eq 1 ] && bootscripts=$bscript  #If we weren't set to run scripts, use setting from IMG
	[ $brebootwait -ne $drebootwait ] && rebootwait=$brebootwait
	[ "$bapip" != "10.1.1.1" ] && apip=$bapip
	[ "$bapssid" != "sdm" ] && apssid=$bapssid
	[ "$bwificountry" != "" ] && wificountry="$bwificountry"
	if [[ "$loadllocal" =~ "|wifi|" ]]
	then
	    [ "$wificountry" == "" ] && echo "% No --wifi-country specified with --loadlocal wifi; Using 'US' for a short time" && wificountry="US"
	fi
	[ "$bkeymap" != "" ] && echo "keymap=$bkeymap" >> /mnt/sdm/etc/sdm/auto-1piboot.conf
	[ "$btimezone" != "" ] && echo "timezone=$btimezone" >> /mnt/sdm/etc/sdm/auto-1piboot.conf
	[ "$blocale" != "" ] && echo "locale=$blocale" >> /mnt/sdm/etc/sdm/auto-1piboot.conf
	if [ "$bdhcpcd" != "" ]
	then
	    cat $bdhcpcd >> /mnt/sdm/etc/dhcpcd.conf
	    burnmsg+=("$(thisdate) > Append '$bdhcpcd' to /etc/dhcpcd.conf")
	    echo "> Append '$bdhcpcd' to /etc/dhcpcd.conf"
	fi
	if [ "$bexports" != "" ]
	then
	    cp $bexports /mnt/sdm/etc/exports
	    burnmsg+=("$(thisdate) > Copy '$bexports' to /etc/exports")
	    echo "> Copy '$bexports' to /etc/exports"
	fi
	if [ "$bsysctl" != "" ]
	then
	    cp $bsysctl /mnt/sdm/etc/sysctl.d
	    burnmsg+=("$(thisdate) > Copy '$bsysctl' to /etc/sysctl.d/$(basename $bsysctl)")
	    echo "> Copy '$bsysctl' to /etc/sysctl.d/$(basename $bsysctl)"
	fi
	if [ "$bwpaconf" != "" ] # was --wpa specified on the burn command?
	then
	    [ ! -f $bwpaconf ] && echo "% --wpa config file '$bwpaconf' not found; Skipping"
	    if [ $burn -eq 1 ]
	    then
		burnmsg+=("$(thisdate) > Copy WPA Supplicant configuration '$bwpaconf' to '$burndev'")
		echo "> Copy WPA Supplicant configuration '$bwpaconf' to '$burndev'"
	    else
		burnmsg+=("$(thisdate) > Copy WPA Supplicant configuration '$bwpaconf' to Image '$burnfilefile'")
		echo "> Copy WPA Supplicant configuration '$bwpaconf' to '$burnfilefile'"
	    fi
	    [ -f $bwpaconf ] && cp $bwpaconf /mnt/sdm/etc/wpa_supplicant/wpa_supplicant.conf
	    wpaconf="$bwpaconf"   # Write updated wpaconf to SD Card params
	fi
	setbootset    # Handle --bootset settings
  	writeconfig                  # Write updated params to the SD card
	[ $rebootwait -ne $drebootwait ] && wmsg=" with a $rebootwait second wait" || wmsg=""
	[ $bootscripts -eq 1 ] && burnmsg+=("$(thisdate) > First System Boot Custom Boot Scripts enabled${wmsg}") || \
		burnmsg+=("$(thisdate) > First System Boot Custom Boot Scripts disabled")
	[ $reboot -eq 1 ] && burnmsg+=("$(thisdate) > First System Boot automatic restart enabled") || \
		burnmsg+=("$(thisdate) > FirstBoot System Boot automatic restart disabled")
	[ $burn -eq 1 ] && burnmsg+=("$(thisdate) * Burn Completed") || burnmsg+=("$(thisdate) * Image Completed")
	[ $burn -eq 1 ] && echo "> Write burn log entry to storage '$burndev'" || echo "> Write burn log entry to Image '$burnfilefile'"
	for (( i=0 ; i < ${#burnmsg[@]} ; i++ ))
	do
	    echo "${burnmsg[$i]}" >> /mnt/sdm/etc/sdm/history
	done
	[ $bootscripts -eq 1 ] && echo "> First System Boot Custom Boot Scripts enabled" || echo "> First System Boot Custom Boot Scripts disabled"
	[ $reboot -eq 1 ] && echo "> First System Boot automatic restart enabled${wmsg}" || echo "> First System Boot automatic restart disabled"
    else
	echo "% IMG '$dimg' is not sdm-enhanced; Burn data will not be written"
    fi
    [ $burn -eq 1 ] && ismounted ${burndev}2 && umount -v ${burndev}2 || docleanup
    [ $burn -eq 1 ] && echo "* Storage '$burndev' is ready" || echo "* Storage Image '$burnfilefile' is ready"
    exit 0
fi

if [ $fdomount -eq 1 ]
then
    domount
    echo ""
    [ $dimgdev -eq 0 ] && echo "IMG '$dimg' mounted on /mnt/sdm" || echo "Device '$dimg' mounted on /mnt/sdm"
    echo "** BE VERY CAREFUL! **"
    echo "** Precede all path references by /mnt/sdm or you may modify the running system **"
    echo ""
    echo "Use 'exit' to Exit the Bash shell and unmount the IMG file"
    echo ""
    [ "$mcolors" == "" ] && mcolors="black:LightSalmon1:blue"
    IFS=":" read mfg mbg mcursor <<< $mcolors
    [ "$mfg" == "" ] && mfg="black"
    [ "$mbg" == "" ] && mbg="LightSalmon1"
    [ "$mcursor" == "" ] && mcursor="blue"

    stermcolors "$mfg" "$mbg" "$mcursor" xt
    cd /mnt/sdm
    bash < $(tty)
    cd - > /dev/null
    docleanup
    resetcolors xt
    exit 0
fi

if [ $noextend -eq 0 ]
then
    echo "Extend disk image by ${imgext}MB..."
    extendimage "$dimg" "$imgext"
    #
    # Mount the image file into a loop device and resize the file system
    #
    domount
    echo " * (Ignore on-line resizing message) *"
    resize2fs ${loop}p2
fi
if [ $fextendonly -eq 0 -o $aptfunction -eq 1 ]
then
    [ ! -d /mnt/sdm/boot ] && domount
else
    docleanup
    exit 0
fi

icolors=0    # Don't set colors around systemd-nspawn
if [ -f $sdmdone -o $fexplore -eq 1 -o $aptfunction -eq 1 ]
then
    if [ $aptfunction -eq 0 -a $fexplore -ne 1 ]
    then
	echo ""
	echo "% It appears that '$dimg' is already customized"
	echo "% Entering nspawn for you to have a look at it"
	echo "  To re-enable this image for sdm in nspawn do: rm -f ${sdmdone#/mnt/sdm}"
	echo "  Then exit nspawn and re-run this command: $sdmcommandline"
	echo ""
	spawncmd=""
	icolors=1
    else
	if [ "$aptmaint" != "" ]
	then
	    fbatch=1
	    spawncmd="/usr/local/sdm/sdm-phase1 apt $aptmaint"
	else
	    [ $dimgdev -eq 0 ] && echo "* nspawn into image '$dimg'" || echo "* nspawn into device '$dimg'"
	    spawncmd=""
	    icolors=1
	fi
    fi
else
    #
    # Doing a customization
    # Create and populate /usr/local/sdm and /etc/sdm in the IMG
    #
    pi1bootconf="$(fndotfullpath $pi1bootconf)"
    spawncmd="/usr/local/sdm/sdm-phase1"
    #
    # Create and populate /usr/local/sdm tree
    #
    [ ! -d /mnt/sdm/etc/sdm ] && mkdir /mnt/sdm/etc/sdm /mnt/sdm/etc/sdm/assets /mnt/sdm/etc/sdm/0piboot
    echo "# sdm added these settings from the command line (see /etc/sdm/history)" > /mnt/sdm/etc/sdm/auto-1piboot.conf
    setbootset    # Handle --bootset settings
    [ ! -d /mnt/sdm/usr/local/sdm ] && mkdir /mnt/sdm/usr/local/sdm \
					     /mnt/sdm/usr/local/sdm/1piboot
    cp $src/{sdm,sdm-phase0,sdm-phase1,sdm-cparse} /mnt/sdm/usr/local/sdm
    cp $src/{sdm-apt,sdm-apt-cacher,sdm-firstboot} /mnt/sdm/usr/local/sdm
    cp $src/{sdm-cportal,sdm-logmsg} /mnt/sdm/usr/local/sdm
    chmod 755 /mnt/sdm/usr/local/sdm/*
    [ "${appfile:0:1}" == "@" ]  && cp -f ${appfile:1:999}  /mnt/sdm/usr/local/sdm
    [ "${xappfile:0:1}" == "@" ] && cp -f ${xappfile:1:999} /mnt/sdm/usr/local/sdm
    cp -f $src/1piboot/*.sh /mnt/sdm/usr/local/sdm/1piboot
    chmod 755 /mnt/sdm/usr/local/sdm/1piboot/*.sh
    logtoboth /mnt/sdm "* Start Configuration"
    logtoboth /mnt/sdm "> Command Line: $cmdline"
    logtoboth /mnt/sdm "> Copy sdm to /usr/local/sdm in the IMG"   # Yes, already done above ;)
    if [ $loadl10n -eq 1 ]
    then
	readl10n
	logtoboth /mnt/sdm "> Load Localization (L10N) settings from running system"
	logtoboth /mnt/sdm "> * Keymap:       $keymap"
	logtoboth /mnt/sdm "> * Locale:       $locale"
	logtoboth /mnt/sdm "> * Timezone:     $timezone"
	logtoboth /mnt/sdm "> * WiFi Country: $wificountry"
    fi
    if [ "$pi1bootconf" != "" ]
    then
	logtoboth /mnt/sdm "> Copy Custom 1piboot.conf '$pi1bootconf' to the IMG"
	cp $pi1bootconf /mnt/sdm/etc/sdm/1piboot.conf
	cp $pi1bootconf /mnt/sdm/usr/local/sdm/1piboot                                         #Drop a copy in /usr/local/sdm in the IMG
    else
	cp $src/1piboot/1piboot.conf /mnt/sdm/etc/sdm/
    fi
    chmod 644 /mnt/sdm/etc/sdm/1piboot.conf
    if [ "$cscript" != "" ]
    then
	logtoboth /mnt/sdm "> Copy Custom Phase Script '$cscript' to /usr/local/sdm in the IMG"
	cp $cscript /mnt/sdm/usr/local/sdm
    fi
    chmod 755 /mnt/sdm/usr/local/sdm/*
    # If --apps and/or --xapps are files copy them also. If not, clear the variables for writeconfig
    [ "${appfile:0:1}" == "@" ]  && cp ${appfile:1:999}  /mnt/sdm/usr/local/sdm || appfile=""
    [ "${xappfile:0:1}" == "@" ] && cp ${xappfile:1:999} /mnt/sdm/usr/local/sdm || xappfile=""
    #
    # Write the config settings into the IMG
    #
    writeconfig
    #
    # Perform Phase 0 on the image
    #
    /mnt/sdm/usr/local/sdm/sdm-phase0
    touch $sdmdone
    
    echo "* nspawn into image '$dimg' for Phase 1"
    echo ""
fi

[ $icolors -eq 1 ] && stermcolors "$efg" "$ebg" "$ecursor" xt
systemd-nspawn --directory=/mnt/sdm $nspawnsw $spawncmd < $(tty)
docleanup
[ $icolors -eq 1 ] && resetcolors xt

exit 0
